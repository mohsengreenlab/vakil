
<div class="min-h-screen bg-muted/30">
    <!-- Admin Header -->
    <header class="bg-card border-b border-border shadow-sm">
        <div class="container mx-auto px-4">
            <div class="flex items-center justify-between h-16">
                <div class="flex items-center gap-4">
                    <div class="flex items-center gap-2">
                        <div class="w-8 h-8 bg-primary rounded-lg flex items-center justify-center">
                            <span class="text-primary-foreground font-bold text-lg">ق</span>
                        </div>
                        <span class="font-bold text-xl">پنل مدیریت</span>
                    </div>
                </div>
                <div class="flex items-center gap-4">
                    <% if (typeof adminUsername !== 'undefined' && adminUsername) { %>
                    <span class="text-muted-foreground text-sm">خوش آمدید، <%= adminUsername %></span>
                    <% } %>
                    <button onclick="logout()" class="btn-secondary" data-testid="button-logout">
                        خروج
                    </button>
                    <a href="/" class="btn-primary">
                        بازگشت به سایت
                    </a>
                </div>
            </div>
        </div>
    </header>

    <!-- Navigation Tabs -->
    <div class="bg-card border-b border-border">
        <div class="container mx-auto px-4">
            <nav class="flex space-x-reverse space-x-8">
                <button onclick="showTab('overview')" class="tab-btn active" data-tab="overview" data-testid="tab-overview">
                    نمای کلی
                </button>
                <button onclick="showTab('clients')" class="tab-btn" data-tab="clients" data-testid="tab-clients">
                    مدیریت موکلان
                </button>
                <button onclick="showTab('cases')" class="tab-btn" data-tab="cases" data-testid="tab-cases">
                    مدیریت پرونده‌ها
                </button>
                <button onclick="showTab('contacts')" class="tab-btn" data-tab="contacts" data-testid="tab-contacts">
                    پیام‌های تماس
                </button>
                <button onclick="showTab('qa')" class="tab-btn" data-tab="qa" data-testid="tab-qa">
                    پرسش و پاسخ
                </button>
                <button onclick="showTab('files')" class="tab-btn" data-tab="files" data-testid="tab-files">
                    مدیریت فایل ها
                </button>
                <button onclick="showTab('client-messages')" class="tab-btn" data-tab="client-messages" data-testid="tab-client-messages">
                    پیام های موکلان
                </button>
            </nav>
        </div>
    </div>

    <div class="container mx-auto px-4 py-8">
    
    <script type="application/json" id="cases-data"><%- JSON.stringify(cases || []).replace(/</g,'\\u003c').replace(/--/g,'\\u002d\\u002d') %></script>
    <script>
        // Pass server data to JavaScript (XSS-safe)
        try {
            window.serverCases = JSON.parse(document.getElementById('cases-data').textContent || '[]');
        } catch (error) {
            console.error('Error parsing cases data:', error);
            window.serverCases = [];
        }
    </script>
        <!-- Overview Tab -->
        <div id="overview-tab" class="tab-content">
            <h1 class="text-3xl font-bold mb-6">داشبورد مدیریت</h1>
            
            <!-- KPI Cards -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                <div class="card p-6">
                    <div class="flex items-center justify-between mb-4">
                        <h3 class="text-sm font-medium text-muted-foreground">موکلان کل</h3>
                        <div class="w-8 h-8 bg-primary/10 rounded-lg flex items-center justify-center">
                            <svg class="w-4 h-4 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
                            </svg>
                        </div>
                    </div>
                    <div class="text-3xl font-bold text-primary mb-2" id="clients-count">0</div>
                    <p class="text-sm text-muted-foreground">تعداد موکلان</p>
                </div>

                <div class="card p-6">
                    <div class="flex items-center justify-between mb-4">
                        <h3 class="text-sm font-medium text-muted-foreground">پرونده‌های فعال</h3>
                        <div class="w-8 h-8 bg-accent/10 rounded-lg flex items-center justify-center">
                            <svg class="w-4 h-4 text-accent" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                            </svg>
                        </div>
                    </div>
                    <div class="text-3xl font-bold text-accent mb-2" id="active-cases-count">0</div>
                    <p class="text-sm text-muted-foreground">در حال پیگیری</p>
                </div>

                <div class="card p-6">
                    <div class="flex items-center justify-between mb-4">
                        <h3 class="text-sm font-medium text-muted-foreground">کل پرونده‌ها</h3>
                        <div class="w-8 h-8 bg-primary/10 rounded-lg flex items-center justify-center">
                            <svg class="w-4 h-4 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                            </svg>
                        </div>
                    </div>
                    <div class="text-3xl font-bold text-primary mb-2" id="total-cases-count">0</div>
                    <p class="text-sm text-muted-foreground">تعداد کل</p>
                </div>

                <div class="card p-6">
                    <div class="flex items-center justify-between mb-4">
                        <h3 class="text-sm font-medium text-muted-foreground">پیام‌های جدید</h3>
                        <div class="w-8 h-8 bg-accent/10 rounded-lg flex items-center justify-center">
                            <svg class="w-4 h-4 text-accent" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                            </svg>
                        </div>
                    </div>
                    <div class="text-3xl font-bold text-accent mb-2"><%= contacts.length %></div>
                    <p class="text-sm text-muted-foreground">پیام دریافتی</p>
                </div>
            </div>
        </div>

        <!-- Clients Management Tab -->
        <div id="clients-tab" class="tab-content hidden">
            <div class="flex justify-between items-center mb-6">
                <h1 class="text-3xl font-bold">مدیریت موکلان</h1>
                <button onclick="showAddClientForm()" class="btn-primary" data-testid="button-add-client">
                    + افزودن موکل جدید
                </button>
            </div>

            <!-- Add Client Form (Hidden by default) -->
            <div id="add-client-form" class="card p-6 mb-6 hidden">
                <h2 class="text-xl font-bold mb-4">افزودن موکل جدید</h2>
                <form id="clientForm" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium mb-2">نام</label>
                        <input type="text" name="firstName" required class="input-field" data-testid="input-client-firstname" placeholder="نام موکل">
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2">نام خانوادگی</label>
                        <input type="text" name="lastName" required class="input-field" data-testid="input-client-lastname" placeholder="نام خانوادگی موکل">
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2">کد ملی</label>
                        <input type="text" name="nationalId" required maxlength="10" pattern="[0-9]{10}" class="input-field" data-testid="input-client-nationalid" placeholder="کد ملی ۱۰ رقمی">
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2">شماره تلفن اول</label>
                        <input type="tel" name="phone1" required class="input-field" data-testid="input-client-phone1" placeholder="۰۹۱۲۳۴۵۶۷۸۹">
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2">شماره تلفن دوم (اختیاری)</label>
                        <input type="tel" name="phone2" class="input-field" data-testid="input-client-phone2" placeholder="۰۹۱۲۳۴۵۶۷۸۹">
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2">رمز عبور موکل <span class="text-red-500">*</span></label>
                        <input type="password" name="password" required minlength="6" class="input-field" data-testid="input-client-password" placeholder="حداقل ۶ کاراکتر">
                    </div>
                    <div class="md:col-span-2 flex gap-4">
                        <button type="submit" class="btn-primary" data-testid="button-save-client">ذخیره موکل</button>
                        <button type="button" onclick="hideAddClientForm()" class="btn-secondary" data-testid="button-cancel-client">لغو</button>
                    </div>
                </form>
            </div>

            <!-- Assign Case Form (Hidden by default) -->
            <div id="assign-case-form" class="card p-6 mb-6 hidden">
                <h2 class="text-xl font-bold mb-4">تخصیص پرونده جدید</h2>
                <div class="mb-4 p-3 bg-muted/30 rounded-lg">
                    <span class="text-sm text-muted-foreground">موکل انتخاب شده: </span>
                    <span class="font-medium" id="selected-client-name"></span>
                    <span class="text-sm text-muted-foreground mr-2">(شناسه: </span>
                    <span class="font-medium" id="selected-client-id"></span>
                    <span class="text-sm text-muted-foreground">)</span>
                </div>
                <form id="assignCaseForm" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <input type="hidden" name="clientId" id="assign-client-id">
                    <div>
                        <label class="block text-sm font-medium mb-2">شناسه پرونده (اختیاری)</label>
                        <input type="text" name="caseId" class="input-field" data-testid="input-assign-case-id" placeholder="در صورت خالی بودن، خودکار تولید می‌شود" maxlength="7">
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2">وضعیت پرونده</label>
                        <select name="status" required class="input-field" data-testid="select-assign-case-status">
                            <option value="under-review">در انتظار بررسی</option>
                            <option value="lawyer-study">در حال مطالعه وکیل</option>
                            <option value="in-progress">در حال اقدام</option>
                            <option value="awaiting-court">در انتظار رای دادگاه</option>
                            <option value="verdict-issued">صدور رای</option>
                        </select>
                    </div>
                    <div class="md:col-span-2 flex gap-4">
                        <button type="submit" class="btn-primary" data-testid="button-save-assign-case">تخصیص پرونده</button>
                        <button type="button" onclick="hideAssignCaseForm()" class="btn-secondary" data-testid="button-cancel-assign-case">لغو</button>
                    </div>
                </form>
            </div>

            <!-- Clients List -->
            <div class="card p-6">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-xl font-bold">لیست موکلان</h2>
                </div>
                
                <!-- Enhanced Search Controls -->
                <div class="card p-4 mb-4 bg-muted/30">
                    <h3 class="text-md font-semibold mb-3">جستجو در موکلان</h3>
                    
                    <!-- Search Criteria Radio Buttons -->
                    <div class="mb-3">
                        <label class="text-sm font-medium mb-2 block">معیار جستجو:</label>
                        <div class="flex flex-wrap gap-4" data-testid="search-criteria-options">
                            <label class="flex items-center gap-2">
                                <input type="radio" name="searchCriteria" value="client_id" class="radio" data-testid="radio-client-id">
                                <span class="text-sm">شناسه موکل</span>
                            </label>
                            <label class="flex items-center gap-2">
                                <input type="radio" name="searchCriteria" value="first_name" class="radio" data-testid="radio-first-name">
                                <span class="text-sm">نام</span>
                            </label>
                            <label class="flex items-center gap-2">
                                <input type="radio" name="searchCriteria" value="last_name" class="radio" data-testid="radio-last-name">
                                <span class="text-sm">نام خانوادگی</span>
                            </label>
                            <label class="flex items-center gap-2">
                                <input type="radio" name="searchCriteria" value="national_id" class="radio" data-testid="radio-national-id">
                                <span class="text-sm">کد ملی</span>
                            </label>
                            <label class="flex items-center gap-2">
                                <input type="radio" name="searchCriteria" value="phone_numbers" class="radio" data-testid="radio-phone-numbers">
                                <span class="text-sm">شماره تلفن</span>
                            </label>
                            <label class="flex items-center gap-2">
                                <input type="radio" name="searchCriteria" value="all" class="radio" checked data-testid="radio-all">
                                <span class="text-sm">همه موارد</span>
                            </label>
                        </div>
                    </div>
                    
                    <!-- Search Input and Controls -->
                    <div class="flex gap-2">
                        <input type="search" id="clients-search" class="input-field flex-1" placeholder="عبارت جستجو را وارد کنید..." data-testid="input-search-clients">
                        <button onclick="clearClientsSearch()" class="btn-secondary text-sm px-3" data-testid="button-clear-search">
                            پاک کردن
                        </button>
                        <button onclick="performLiveSearch()" class="btn-primary text-sm px-4" data-testid="button-search">
                            جستجو
                        </button>
                    </div>
                </div>
                
                <div class="overflow-x-auto">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>شناسه موکل</th>
                                <th>نام و نام خانوادگی</th>
                                <th>کد ملی</th>
                                <th>شماره تلفن</th>
                                <th>تاریخ ثبت</th>
                                <th>تعداد پرونده</th>
                                <th>عملیات</th>
                            </tr>
                        </thead>
                        <tbody id="clients-table-body">
                            <tr>
                                <td colspan="7" class="text-center py-8 text-muted-foreground">در حال بارگذاری...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                
                <!-- Pagination for clients -->
                <div id="clients-pagination" class="p-4 border-t border-border hidden">
                    <div class="flex items-center justify-between">
                        <div class="text-sm text-muted-foreground" id="clients-count-info">
                            نمایش ۰ موکل
                        </div>
                        <div class="flex gap-2" id="clients-pagination-buttons">
                            <!-- Pagination buttons will be generated by JavaScript -->
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Cases Management Tab -->
        <div id="cases-tab" class="tab-content hidden">
            <div class="flex justify-between items-center mb-6">
                <h1 class="text-3xl font-bold">مدیریت پرونده‌ها</h1>
            </div>

            <!-- Add Case Form (Hidden by default) -->
            <div id="add-case-form" class="card p-6 mb-6 hidden">
                <h2 class="text-xl font-bold mb-4">افزودن پرونده جدید</h2>
                <form id="caseForm" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium mb-2">انتخاب موکل</label>
                        <select name="clientId" required class="input-field" data-testid="select-case-client" id="case-client-select">
                            <option value="">در حال بارگذاری موکلان...</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2">وضعیت پرونده</label>
                        <select name="status" required class="input-field" data-testid="select-case-status">
                            <option value="under-review">در انتظار بررسی</option>
                            <option value="lawyer-study">در حال مطالعه وکیل</option>
                            <option value="in-progress">در حال اقدام</option>
                            <option value="awaiting-court">در انتظار رای دادگاه</option>
                            <option value="verdict-issued">صدور رای</option>
                        </select>
                    </div>
                    <div class="md:col-span-2 flex gap-4">
                        <button type="submit" class="btn-primary" data-testid="button-save-case">ذخیره پرونده</button>
                        <button type="button" onclick="hideAddCaseForm()" class="btn-secondary" data-testid="button-cancel-case">لغو</button>
                    </div>
                </form>
            </div>

            <!-- Cases List -->
            <div class="card p-6">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-xl font-bold">لیست پرونده‌ها</h2>
                </div>
                
                <!-- Enhanced Search Controls -->
                <div class="card p-4 mb-4 bg-muted/30">
                    <h3 class="text-md font-semibold mb-3">جستجو در پرونده‌ها</h3>
                    
                    <!-- Search Criteria Radio Buttons -->
                    <div class="mb-3">
                        <label class="text-sm font-medium mb-2 block">معیار جستجو:</label>
                        <div class="flex flex-wrap gap-4" data-testid="cases-search-criteria-options">
                            <label class="flex items-center gap-2">
                                <input type="radio" name="casesSearchCriteria" value="case_id" class="radio" data-testid="radio-case-id">
                                <span class="text-sm">شناسه پرونده</span>
                            </label>
                            <label class="flex items-center gap-2">
                                <input type="radio" name="casesSearchCriteria" value="client_id" class="radio" data-testid="radio-case-client-id">
                                <span class="text-sm">شناسه موکل</span>
                            </label>
                            <label class="flex items-center gap-2">
                                <input type="radio" name="casesSearchCriteria" value="last_case_status" class="radio" data-testid="radio-case-status">
                                <span class="text-sm">وضعیت پرونده</span>
                            </label>
                            <label class="flex items-center gap-2">
                                <input type="radio" name="casesSearchCriteria" value="case_creation_date" class="radio" data-testid="radio-case-date">
                                <span class="text-sm">تاریخ ایجاد</span>
                            </label>
                            <label class="flex items-center gap-2">
                                <input type="radio" name="casesSearchCriteria" value="all" class="radio" checked data-testid="radio-cases-all">
                                <span class="text-sm">همه موارد</span>
                            </label>
                        </div>
                    </div>
                    
                    <!-- Search Input and Controls -->
                    <div class="flex gap-2">
                        <input type="search" id="cases-search" class="input-field flex-1" placeholder="عبارت جستجو را وارد کنید..." data-testid="input-search-cases">
                        <button onclick="clearCasesSearch()" class="btn-secondary text-sm px-3" data-testid="button-clear-cases-search">
                            پاک کردن
                        </button>
                        <button onclick="performCasesLiveSearch()" class="btn-primary text-sm px-4" data-testid="button-search-cases">
                            جستجو
                        </button>
                    </div>
                </div>
                
                <div class="overflow-x-auto">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>شناسه پرونده</th>
                                <th>شناسه موکل</th>
                                <th>نام موکل</th>
                                <th>وضعیت</th>
                                <th>تاریخ ایجاد</th>
                                <th>عملیات</th>
                            </tr>
                        </thead>
                        <tbody id="cases-table-body">
                            <tr>
                                <td colspan="6" class="text-center py-8 text-muted-foreground">در حال بارگذاری...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Case Event Management Modal -->
            <div id="case-events-modal" class="fixed inset-0 bg-black/50 hidden z-50">
                <div class="flex items-center justify-center min-h-screen p-4">
                    <div class="bg-card rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
                        <div class="border-b border-border p-6">
                            <div class="flex items-center justify-between">
                                <h2 class="text-2xl font-bold">مدیریت رویدادهای پرونده</h2>
                                <button onclick="closeCaseEventsModal()" class="text-muted-foreground hover:text-foreground">
                                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                    </svg>
                                </button>
                            </div>
                            <div class="mt-2 text-muted-foreground" id="case-events-case-info">
                                <!-- Case info will be displayed here -->
                            </div>
                        </div>

                        <div class="p-6">
                            <!-- Add Event Form -->
                            <div class="mb-6">
                                <div class="flex items-center justify-between mb-4">
                                    <h3 class="text-lg font-semibold">افزودن رویداد جدید</h3>
                                    <button onclick="toggleAddEventForm()" class="btn-primary btn-sm" id="toggle-add-event-btn" data-testid="button-toggle-add-event">
                                        + افزودن رویداد
                                    </button>
                                </div>
                                
                                <div id="add-event-form" class="card p-4 bg-muted/30 hidden">
                                    <form id="eventForm" class="grid grid-cols-1 gap-4">
                                        <div>
                                            <label class="block text-sm font-medium mb-2">نوع رویداد <span class="text-red-500">*</span></label>
                                            <select name="eventType" required class="input-field" data-testid="select-event-type">
                                                <option value="">انتخاب نوع رویداد</option>
                                                <option value="جلسه دادگاه">جلسه دادگاه</option>
                                                <option value="مشاوره">مشاوره</option>
                                                <option value="تنظیم لایحه">تنظیم لایحه</option>
                                                <option value="ارسال مدارک">ارسال مدارک</option>
                                                <option value="دریافت مدارک">دریافت مدارک</option>
                                                <option value="پیگیری">پیگیری</option>
                                                <option value="تماس تلفنی">تماس تلفنی</option>
                                                <option value="سایر">سایر</option>
                                            </select>
                                        </div>
                                        <div>
                                            <label class="block text-sm font-medium mb-2">جزئیات رویداد</label>
                                            <textarea name="details" rows="3" class="input-field" placeholder="شرح جزئیات رویداد..." data-testid="textarea-event-details"></textarea>
                                        </div>
                                        <div class="flex gap-4">
                                            <button type="submit" class="btn-primary" data-testid="button-save-event">ذخیره رویداد</button>
                                            <button type="button" onclick="cancelAddEvent()" class="btn-secondary" data-testid="button-cancel-add-event">لغو</button>
                                        </div>
                                    </form>
                                </div>
                            </div>

                            <!-- Events List -->
                            <div>
                                <h3 class="text-lg font-semibold mb-4">لیست رویدادهای پرونده</h3>
                                <div id="case-events-list" class="space-y-4">
                                    <!-- Events will be loaded here -->
                                </div>
                                <div id="case-events-loading" class="text-center py-8 text-muted-foreground hidden">
                                    در حال بارگذاری...
                                </div>
                                <div id="case-events-empty" class="text-center py-8 text-muted-foreground hidden">
                                    هیچ رویدادی برای این پرونده ثبت نشده است
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Edit Event Modal -->
            <div id="edit-event-modal" class="fixed inset-0 bg-black/50 hidden z-50">
                <div class="flex items-center justify-center min-h-screen p-4">
                    <div class="bg-card rounded-lg max-w-lg w-full">
                        <div class="border-b border-border p-6">
                            <div class="flex items-center justify-between">
                                <h2 class="text-xl font-bold">ویرایش رویداد</h2>
                                <button onclick="closeEditEventModal()" class="text-muted-foreground hover:text-foreground">
                                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                    </svg>
                                </button>
                            </div>
                        </div>

                        <div class="p-6">
                            <form id="editEventForm" class="grid grid-cols-1 gap-4">
                                <input type="hidden" name="eventId" id="edit-event-id">
                                <div>
                                    <label class="block text-sm font-medium mb-2">نوع رویداد <span class="text-red-500">*</span></label>
                                    <select name="eventType" required class="input-field" id="edit-event-type" data-testid="select-edit-event-type">
                                        <option value="">انتخاب نوع رویداد</option>
                                        <option value="جلسه دادگاه">جلسه دادگاه</option>
                                        <option value="مشاوره">مشاوره</option>
                                        <option value="تنظیم لایحه">تنظیم لایحه</option>
                                        <option value="ارسال مدارک">ارسال مدارک</option>
                                        <option value="دریافت مدارک">دریافت مدارک</option>
                                        <option value="پیگیری">پیگیری</option>
                                        <option value="تماس تلفنی">تماس تلفنی</option>
                                        <option value="سایر">سایر</option>
                                    </select>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium mb-2">جزئیات رویداد</label>
                                    <textarea name="details" rows="3" class="input-field" placeholder="شرح جزئیات رویداد..." id="edit-event-details" data-testid="textarea-edit-event-details"></textarea>
                                </div>
                                <div class="flex gap-4">
                                    <button type="submit" class="btn-primary" data-testid="button-update-event">بروزرسانی</button>
                                    <button type="button" onclick="closeEditEventModal()" class="btn-secondary" data-testid="button-cancel-edit-event">لغو</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Contact Messages Tab -->
        <div id="contacts-tab" class="tab-content hidden">
            <h1 class="text-3xl font-bold mb-6">پیام‌های تماس</h1>
            
            <div class="card p-6">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-xl font-bold">پیام‌های دریافتی</h2>
                    <input type="search" id="contacts-search" class="input-field w-64" placeholder="جستجو در پیام‌ها..." data-testid="input-search-contacts">
                </div>
                
                <% if (contacts.length === 0) { %>
                <div class="text-center py-8 text-muted-foreground">
                    هیچ پیامی دریافت نشده است
                </div>
                <% } else { %>
                <div class="space-y-4">
                    <% contacts.forEach((contact) => { %>
                    <div class="border border-border rounded-lg p-4 hover:bg-muted/30 transition-colors" data-testid="contact-item-<%= contact.id %>">
                        <div class="flex justify-between items-start mb-2">
                            <div class="font-medium">
                                <%= contact.firstName %> <%= contact.lastName %>
                            </div>
                            <div class="text-sm text-muted-foreground">
                                <%= contact.createdAt ? new Date(contact.createdAt).toLocaleDateString('fa-IR') : 'نامشخص' %>
                            </div>
                        </div>
                        <div class="text-sm text-muted-foreground mb-2">
                            موضوع: 
                            <% const subjectMap = {
                                'consultation': 'درخواست مشاوره',
                                'appointment': 'تعیین وقت ملاقات',
                                'case-status': 'پیگیری پرونده',
                                'information': 'درخواست اطلاعات',
                                'other': 'سایر'
                            } %>
                            <%= subjectMap[contact.subject] || contact.subject %>
                        </div>
                        <div class="text-sm mb-3">
                            <%= contact.message.length > 150 ? contact.message.substring(0, 150) + '...' : contact.message %>
                        </div>
                        <div class="flex justify-between items-center">
                            <div class="text-sm text-muted-foreground">
                                <span class="ml-4" data-testid="contact-phone-<%= contact.id %>">📞 <%= contact.phone %></span>
                                <% if (contact.email) { %>
                                <span data-testid="contact-email-<%= contact.id %>">📧 <%= contact.email %></span>
                                <% } %>
                            </div>
                            <div class="flex gap-2">
                                <button onclick="convertToClient('<%= contact.id %>')" class="text-primary hover:underline text-sm" data-testid="button-convert-<%= contact.id %>">
                                    تبدیل به موکل
                                </button>
                                <button onclick="replyToContact('<%= contact.id %>')" class="text-accent hover:underline text-sm" data-testid="button-reply-<%= contact.id %>">
                                    پاسخ
                                </button>
                            </div>
                        </div>
                    </div>
                    <% }) %>
                </div>
                <% } %>
            </div>
        </div>

        <!-- Files Management Tab -->
        <div id="files-tab" class="tab-content hidden">
            <h1 class="text-3xl font-bold mb-6">مدیریت فایل‌های موکلان</h1>
            
            <!-- Client List for File Management -->
            <div class="card p-6 mb-6">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-xl font-bold">انتخاب موکل برای مشاهده فایل‌ها</h2>
                    <input type="search" id="files-clients-search" class="input-field w-64" placeholder="جستجو در موکلان..." data-testid="input-search-files-clients">
                </div>
                
                <div class="overflow-x-auto">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>شناسه موکل</th>
                                <th>نام و نام خانوادگی</th>
                                <th>کد ملی</th>
                                <th>شماره تلفن</th>
                                <th>تعداد فایل</th>
                                <th>عملیات</th>
                            </tr>
                        </thead>
                        <tbody id="files-clients-table-body">
                            <tr>
                                <td colspan="6" class="text-center py-8 text-muted-foreground">در حال بارگذاری موکلان...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Client Files List (Initially Hidden) -->
            <div id="client-files-section" class="card p-6 hidden">
                <div class="flex justify-between items-center mb-4">
                    <div>
                        <h2 class="text-xl font-bold">فایل‌های موکل</h2>
                        <p class="text-sm text-muted-foreground" id="selected-client-info">هیچ موکلی انتخاب نشده</p>
                    </div>
                    <button onclick="closeClientFiles()" class="btn-secondary" data-testid="button-close-files">
                        بازگشت به لیست موکلان
                    </button>
                </div>
                
                <div id="client-files-content">
                    <div class="text-center py-8 text-muted-foreground">
                        در حال بارگذاری فایل‌ها...
                    </div>
                </div>
            </div>
        </div>

        <!-- Client Messages Tab -->
        <div id="client-messages-tab" class="tab-content hidden">
            <h1 class="text-3xl font-bold mb-6">پیام‌های موکلان</h1>
            
            <!-- Client List for Messaging -->
            <div class="card p-6 mb-6">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-xl font-bold">لیست موکلان</h2>
                    <input type="search" id="messaging-clients-search" class="input-field w-64" placeholder="جستجو در موکلان..." data-testid="input-search-messaging-clients">
                </div>
                
                <div class="overflow-x-auto">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>شناسه موکل</th>
                                <th>نام و نام خانوادگی</th>
                                <th>کد ملی</th>
                                <th>شماره تلفن</th>
                                <th>پیام‌های خوانده نشده</th>
                                <th>عملیات</th>
                            </tr>
                        </thead>
                        <tbody id="messaging-clients-table-body">
                            <tr>
                                <td colspan="6" class="text-center py-8 text-muted-foreground">در حال بارگذاری موکلان...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Client Messages Section (Initially Hidden) -->
            <div id="client-messages-section" class="card p-6 hidden">
                <div class="flex justify-between items-center mb-4">
                    <div>
                        <h2 class="text-xl font-bold">پیام‌رسانی با موکل</h2>
                        <p class="text-sm text-muted-foreground" id="selected-client-messaging-info">هیچ موکلی انتخاب نشده</p>
                    </div>
                    <button onclick="closeClientMessages()" class="btn-secondary" data-testid="button-close-messages">
                        بازگشت به لیست موکلان
                    </button>
                </div>
                
                <!-- Messages History -->
                <div class="mb-6">
                    <div id="messages-history" class="border border-border rounded-lg p-4 h-96 overflow-y-auto bg-muted/10">
                        <div class="text-center text-muted-foreground">
                            در حال بارگذاری پیام‌ها...
                        </div>
                    </div>
                </div>

                <!-- Send Message Form -->
                <div class="border-t border-border pt-4">
                    <form id="admin-send-message-form" class="flex gap-4">
                        <input type="hidden" id="current-client-id" value="">
                        <div class="flex-1">
                            <textarea 
                                id="admin-message-content" 
                                class="input-field w-full resize-none" 
                                rows="3" 
                                placeholder="پیام خود را اینجا بنویسید..."
                                data-testid="textarea-admin-message"
                                required
                            ></textarea>
                        </div>
                        <div class="flex flex-col gap-2">
                            <button type="submit" class="btn-primary px-6" data-testid="button-send-admin-message">
                                ارسال پیام
                            </button>
                            <button type="button" onclick="refreshMessages()" class="btn-secondary px-6 text-sm" data-testid="button-refresh-admin-messages">
                                بروزرسانی
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- QA Management Tab -->
        <div id="qa-tab" class="tab-content hidden">
            <div class="flex justify-between items-center mb-6">
                <h1 class="text-3xl font-bold">مدیریت پرسش و پاسخ</h1>
                <button onclick="showAddQAForm()" class="btn-primary" data-testid="button-add-qa">
                    + افزودن پرسش و پاسخ جدید
                </button>
            </div>

            <!-- Add QA Form (Hidden by default) -->
            <div id="add-qa-form" class="card p-6 mb-6 hidden">
                <h2 class="text-xl font-bold mb-4">افزودن پرسش و پاسخ جدید</h2>
                <form id="qaForm" class="space-y-4">
                    <div>
                        <label for="qaQuestion" class="block text-sm font-medium mb-2">سوال</label>
                        <textarea id="qaQuestion" name="question" rows="3" class="input-field" placeholder="سوال خود را وارد کنید..." required data-testid="input-qa-question"></textarea>
                    </div>
                    <div>
                        <label for="qaAnswer" class="block text-sm font-medium mb-2">پاسخ</label>
                        <textarea id="qaAnswer" name="answer" rows="6" class="input-field" placeholder="پاسخ سوال را وارد کنید..." required data-testid="input-qa-answer"></textarea>
                    </div>
                    <div class="grid md:grid-cols-2 gap-4">
                        <div>
                            <label for="qaTopic" class="block text-sm font-medium mb-2">موضوع</label>
                            <input type="text" id="qaTopic" name="topic" class="input-field" placeholder="موضوع (مثل: حقوق خانواده)" value="عمومی" data-testid="input-qa-topic">
                        </div>
                        <div>
                            <label for="qaShow" class="block text-sm font-medium mb-2">وضعیت نمایش</label>
                            <select id="qaShow" name="show" class="input-field" data-testid="select-qa-show">
                                <option value="1">نمایش</option>
                                <option value="0">مخفی</option>
                            </select>
                        </div>
                    </div>
                    <div class="flex gap-4">
                        <button type="submit" class="btn-primary" data-testid="button-save-qa">
                            ذخیره
                        </button>
                        <button type="button" onclick="hideAddQAForm()" class="btn-secondary" data-testid="button-cancel-qa">
                            انصراف
                        </button>
                    </div>
                </form>
            </div>

            <!-- Edit QA Form (Hidden by default) -->
            <div id="edit-qa-form" class="card p-6 mb-6 hidden">
                <h2 class="text-xl font-bold mb-4">ویرایش پرسش و پاسخ</h2>
                <form id="editQaForm" class="space-y-4">
                    <input type="hidden" id="editQaId" name="id">
                    <div>
                        <label for="editQaQuestion" class="block text-sm font-medium mb-2">سوال</label>
                        <textarea id="editQaQuestion" name="question" rows="3" class="input-field" required data-testid="input-edit-qa-question"></textarea>
                    </div>
                    <div>
                        <label for="editQaAnswer" class="block text-sm font-medium mb-2">پاسخ</label>
                        <textarea id="editQaAnswer" name="answer" rows="6" class="input-field" required data-testid="input-edit-qa-answer"></textarea>
                    </div>
                    <div class="grid md:grid-cols-2 gap-4">
                        <div>
                            <label for="editQaTopic" class="block text-sm font-medium mb-2">موضوع</label>
                            <input type="text" id="editQaTopic" name="topic" class="input-field" data-testid="input-edit-qa-topic">
                        </div>
                        <div>
                            <label for="editQaShow" class="block text-sm font-medium mb-2">وضعیت نمایش</label>
                            <select id="editQaShow" name="show" class="input-field" data-testid="select-edit-qa-show">
                                <option value="1">نمایش</option>
                                <option value="0">مخفی</option>
                            </select>
                        </div>
                    </div>
                    <div class="flex gap-4">
                        <button type="submit" class="btn-primary" data-testid="button-update-qa">
                            بروزرسانی
                        </button>
                        <button type="button" onclick="hideEditQAForm()" class="btn-secondary" data-testid="button-cancel-edit-qa">
                            انصراف
                        </button>
                    </div>
                </form>
            </div>

            <!-- QA List -->
            <div class="card p-6">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-xl font-bold">فهرست پرسش و پاسخ‌ها</h2>
                    <input type="search" id="qa-admin-search" class="input-field w-64" placeholder="جستجو در پرسش‌ها..." data-testid="input-search-qa">
                </div>
                
                <div id="qa-loading" class="text-center py-8 hidden" data-testid="qa-admin-loading">
                    <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
                    <p class="text-muted-foreground mt-2">در حال بارگذاری...</p>
                </div>

                <div id="qa-empty" class="text-center py-8 hidden" data-testid="qa-admin-empty">
                    <div class="w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4">
                        <svg class="w-8 h-8 text-muted-foreground" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                    </div>
                    <h3 class="text-xl font-semibold mb-2">هنوز پرسش و پاسخی ثبت نشده</h3>
                    <p class="text-muted-foreground">اولین پرسش و پاسخ را اضافه کنید.</p>
                </div>
                
                <div id="qa-list" class="space-y-4" data-testid="qa-admin-list">
                    <!-- QA items will be loaded here -->
                </div>
            </div>
        </div>

        </div>
    </div>
</div>

<style>
.tab-btn {
    padding: 0.75rem 1rem;
    border-bottom: 2px solid transparent;
    transition: all 0.2s;
    color: #6b7280;
}

.tab-btn.active {
    color: #3b82f6;
    border-bottom-color: #3b82f6;
}

.tab-btn:hover {
    color: #374151;
}

.tab-content {
    display: block;
}

.tab-content.hidden {
    display: none;
}

.btn-primary {
    background-color: #3b82f6;
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    border: none;
    cursor: pointer;
    transition: background-color 0.2s;
}

.btn-primary:hover {
    background-color: #2563eb;
}

.btn-secondary {
    background-color: #6b7280;
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    border: none;
    cursor: pointer;
    transition: background-color 0.2s;
}

.btn-secondary:hover {
    background-color: #4b5563;
}

.btn-success {
    background-color: #10b981;
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    border: none;
    cursor: pointer;
    transition: background-color 0.2s;
}

.btn-success:hover {
    background-color: #059669;
}

.input-field {
    padding: 0.5rem 0.75rem;
    border: 1px solid #d1d5db;
    border-radius: 0.5rem;
    width: 100%;
}

.card {
    background-color: white;
    border-radius: 0.5rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.table {
    width: 100%;
    border-collapse: collapse;
}

.table th,
.table td {
    padding: 0.75rem;
    text-align: right;
    border-bottom: 1px solid #e5e7eb;
}

.table th {
    background-color: #f9fafb;
    font-weight: 600;
}

.badge {
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.75rem;
    font-weight: 500;
}

.badge-primary {
    background-color: #dbeafe;
    color: #1e40af;
}

.badge-success {
    background-color: #dcfce7;
    color: #166534;
}

.badge-warning {
    background-color: #fef3c7;
    color: #92400e;
}

.badge-error {
    background-color: #fee2e2;
    color: #991b1b;
}
</style>

<script>
// Global variables
let clients = [];
let allClients = []; // Keep original copy for filtering
let cases = [];
let currentClientsPage = 1;
let clientsPerPage = 10;

// Tab management
function showTab(tabName) {
    // Hide all tabs
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.add('hidden');
    });
    
    // Remove active class from all tab buttons
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    
    // Show selected tab
    document.getElementById(tabName + '-tab').classList.remove('hidden');
    
    // Add active class to selected tab button
    document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
    
    // Load data for specific tabs
    if (tabName === 'files') {
        loadClientsForFiles();
        // Reset to client list view
        document.getElementById('client-files-section').classList.add('hidden');
        document.querySelector('#files-tab .card').style.display = 'block';
    } else if (tabName === 'client-messages') {
        loadClientsForMessaging();
        // Reset to client list view
        document.getElementById('client-messages-section').classList.add('hidden');
    }
    
    // Load data when switching to specific tabs
    if (tabName === 'qa') {
        loadQAItems();
    }
    
    // Load data for the selected tab
    if (tabName === 'clients') {
        loadClients();
    } else if (tabName === 'cases') {
        loadCases();
        loadClientsForSelect();
    } else if (tabName === 'overview') {
        loadDashboardStats();
    }
}

// Client management
function showAddClientForm() {
    document.getElementById('add-client-form').classList.remove('hidden');
}

function hideAddClientForm() {
    document.getElementById('add-client-form').classList.add('hidden');
    document.getElementById('clientForm').reset();
}

// Case management
function showAddCaseForm() {
    document.getElementById('add-case-form').classList.remove('hidden');
    loadClientsForSelect();
}

function hideAddCaseForm() {
    document.getElementById('add-case-form').classList.add('hidden');
    document.getElementById('caseForm').reset();
}

// Load clients for case assignment
async function loadClientsForSelect() {
    try {
        const response = await fetch('/api/admin/clients');
        const result = await response.json();
        
        if (result.success) {
            const select = document.getElementById('case-client-select');
            select.innerHTML = '<option value="">انتخاب موکل...</option>';
            
            result.clients.forEach(client => {
                const option = document.createElement('option');
                option.value = client.client_id;
                option.textContent = `${client.client_id} - ${client.first_name} ${client.last_name}`;
                select.appendChild(option);
            });
        }
    } catch (error) {
        console.error('Error loading clients for select:', error);
    }
}

// Load dashboard statistics
async function loadDashboardStats() {
    try {
        const [clientsResponse, casesResponse] = await Promise.all([
            fetch('/api/admin/clients'),
            fetch('/api/admin/cases')
        ]);
        
        const clientsResult = await clientsResponse.json();
        const casesResult = await casesResponse.json();
        
        if (clientsResult.success) {
            document.getElementById('clients-count').textContent = clientsResult.clients.length;
        }
        
        if (casesResult.success) {
            const totalCases = casesResult.cases.length;
            const activeCases = casesResult.cases.filter(c => c.last_case_status === 'under-review' || c.last_case_status === 'lawyer-study' || c.last_case_status === 'in-progress' || c.last_case_status === 'awaiting-court').length;
            
            document.getElementById('total-cases-count').textContent = totalCases;
            document.getElementById('active-cases-count').textContent = activeCases;
        }
    } catch (error) {
        console.error('Error loading dashboard stats:', error);
    }
}

// Load clients list
async function loadClients() {
    try {
        const response = await fetch('/api/admin/clients', {
            method: 'GET',
            credentials: 'same-origin', // Include cookies for authentication
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        // Check if response is redirected (authentication failure)
        if (response.redirected || response.status === 302) {
            window.location.href = '/admin24';
            return;
        }
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const result = await response.json();
        
        if (result.success && result.clients) {
            // Normalize phone numbers on the client side to handle database inconsistencies
            const normalizedClients = result.clients.map(client => ({
                ...client,
                phone_numbers: Array.isArray(client.phone_numbers) 
                    ? client.phone_numbers 
                    : (typeof client.phone_numbers === 'string' 
                        ? JSON.parse(client.phone_numbers || '[]') 
                        : [])
            }));
            
            clients = normalizedClients;
            allClients = [...normalizedClients]; // Keep original copy for filtering
            renderClientsTable(clients);
        } else {
            document.getElementById('clients-table-body').innerHTML = 
                '<tr><td colspan="7" class="text-center py-8 text-muted-foreground">هیچ موکلی یافت نشد</td></tr>';
        }
    } catch (error) {
        console.error('Error loading clients:', error);
        document.getElementById('clients-table-body').innerHTML = 
            '<tr><td colspan="7" class="text-center py-8 text-muted-foreground">خطا در بارگذاری موکلان</td></tr>';
    }
}

// Load cases list
async function loadCases() {
    try {
        const response = await fetch('/api/admin/cases');
        const result = await response.json();
        
        if (result.success) {
            cases = result.cases;
            renderCasesTable(cases);
        } else {
            document.getElementById('cases-table-body').innerHTML = 
                '<tr><td colspan="6" class="text-center py-8 text-muted-foreground">خطا در بارگذاری پرونده‌ها</td></tr>';
        }
    } catch (error) {
        console.error('Error loading cases:', error);
        document.getElementById('cases-table-body').innerHTML = 
            '<tr><td colspan="6" class="text-center py-8 text-muted-foreground">خطا در بارگذاری پرونده‌ها</td></tr>';
    }
}

// Render clients table with pagination
function renderClientsTable(clientsData) {
    const tbody = document.getElementById('clients-table-body');
    
    if (clientsData.length === 0) {
        tbody.innerHTML = '<tr><td colspan="7" class="text-center py-8 text-muted-foreground">هیچ موکلی یافت نشد</td></tr>';
        document.getElementById('clients-pagination').classList.add('hidden');
        return;
    }
    
    // Calculate pagination
    const startIndex = (currentClientsPage - 1) * clientsPerPage;
    const endIndex = startIndex + clientsPerPage;
    const pageData = clientsData.slice(startIndex, endIndex);
    
    tbody.innerHTML = pageData.map(client => {
        // Phone numbers are already normalized in loadClients()
        const phoneNumbers = client.phone_numbers || [];
        const caseCount = cases.filter(c => c.client_id === client.client_id).length;
        
        return `
            <tr class="hover:bg-muted/30" data-testid="client-row-${client.client_id}">
                <td class="p-4 font-medium">${client.client_id}</td>
                <td class="p-4">${client.first_name} ${client.last_name}</td>
                <td class="p-4">${client.national_id}</td>
                <td class="p-4">${phoneNumbers.join(', ')}</td>
                <td class="p-4">${new Date(client.created_at).toLocaleDateString('fa-IR')}</td>
                <td class="p-4">${caseCount}</td>
                <td class="p-4">
                    <div class="flex gap-2">
                        <button onclick="viewClient('${client.client_id}')" class="text-primary hover:underline text-sm" data-testid="button-view-client-${client.client_id}">
                            مشاهده
                        </button>
                        <button class="assign-case-btn text-accent hover:underline text-sm" 
                                data-client-id="${client.client_id}" 
                                data-client-name="${client.first_name} ${client.last_name}" 
                                data-testid="button-assign-case-${client.client_id}">
                            تخصیص پرونده
                        </button>
                    </div>
                </td>
            </tr>
        `;
    }).join('');
    
    // Update pagination
    updateClientsPagination(clientsData.length);
}

// Update pagination controls
function updateClientsPagination(totalClients) {
    const totalPages = Math.ceil(totalClients / clientsPerPage);
    const countInfo = document.getElementById('clients-count-info');
    const paginationButtons = document.getElementById('clients-pagination-buttons');
    const pagination = document.getElementById('clients-pagination');
    
    if (totalPages <= 1) {
        pagination.classList.add('hidden');
        return;
    }
    
    pagination.classList.remove('hidden');
    
    const startIndex = (currentClientsPage - 1) * clientsPerPage + 1;
    const endIndex = Math.min(currentClientsPage * clientsPerPage, totalClients);
    countInfo.textContent = `نمایش ${startIndex} تا ${endIndex} از ${totalClients} موکل`;
    
    let buttonsHtml = '';
    
    // Previous button
    if (currentClientsPage > 1) {
        buttonsHtml += `<button onclick="goToClientsPage(${currentClientsPage - 1})" class="px-3 py-2 text-sm border border-border rounded-lg hover:bg-muted transition-colors">قبلی</button>`;
    }
    
    // Page numbers
    const startPage = Math.max(1, currentClientsPage - 2);
    const endPage = Math.min(totalPages, currentClientsPage + 2);
    
    for (let i = startPage; i <= endPage; i++) {
        const isActive = i === currentClientsPage ? 'bg-primary text-primary-foreground' : 'border border-border hover:bg-muted';
        buttonsHtml += `<button onclick="goToClientsPage(${i})" class="px-3 py-2 text-sm ${isActive} rounded-lg transition-colors">${i}</button>`;
    }
    
    // Next button
    if (currentClientsPage < totalPages) {
        buttonsHtml += `<button onclick="goToClientsPage(${currentClientsPage + 1})" class="px-3 py-2 text-sm border border-border rounded-lg hover:bg-muted transition-colors">بعدی</button>`;
    }
    
    paginationButtons.innerHTML = buttonsHtml;
}

// Navigate to specific page
function goToClientsPage(page) {
    currentClientsPage = page;
    renderClientsTable(clients);
}

// Enhanced search and filter functionality
function performLiveSearch() {
    const searchTerm = document.getElementById('clients-search').value.toLowerCase().trim();
    const selectedCriteria = document.querySelector('input[name="searchCriteria"]:checked').value;
    
    let filteredClients = [...allClients];
    
    // Apply search filter based on selected criteria
    if (searchTerm) {
        filteredClients = filteredClients.filter(client => {
            switch (selectedCriteria) {
                case 'client_id':
                    return client.client_id.toString().toLowerCase().includes(searchTerm);
                case 'first_name':
                    return client.first_name.toLowerCase().includes(searchTerm);
                case 'last_name':
                    return client.last_name.toLowerCase().includes(searchTerm);
                case 'national_id':
                    return client.national_id.toLowerCase().includes(searchTerm);
                case 'phone_numbers':
                    const clientPhones = client.phone_numbers || [];
                    return clientPhones.some(phone => phone.toLowerCase().includes(searchTerm));
                case 'all':
                default:
                    const fullName = `${client.first_name} ${client.last_name}`.toLowerCase();
                    const nationalId = client.national_id.toLowerCase();
                    const clientId = client.client_id.toString().toLowerCase();
                    const allPhones = client.phone_numbers || [];
                    const phoneMatch = allPhones.some(phone => phone.toLowerCase().includes(searchTerm));
                    return fullName.includes(searchTerm) || nationalId.includes(searchTerm) || 
                           clientId.includes(searchTerm) || phoneMatch;
            }
        });
    }
    
    // Apply default sorting by most recent
    filteredClients.sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime());
    
    clients = filteredClients;
    currentClientsPage = 1; // Reset to first page
    renderClientsTable(clients);
    
    // Update search result count
    const resultCount = filteredClients.length;
    const totalCount = allClients.length;
    showToast(`${resultCount} موکل از ${totalCount} موکل یافت شد`, 'success');
}

// Clear search
function clearClientsSearch() {
    document.getElementById('clients-search').value = '';
    document.querySelector('input[name="searchCriteria"][value="all"]').checked = true;
    clients = [...allClients];
    currentClientsPage = 1;
    renderClientsTable(clients);
    showToast('جستجو پاک شد', 'info');
}

// Legacy function for backwards compatibility
function filterClients() {
    performLiveSearch();
}

function clearClientsFilter() {
    clearClientsSearch();
}

// Cases table rendering
function renderCasesTable(cases) {
    const tableBody = document.getElementById('cases-table-body');
    
    if (!cases || cases.length === 0) {
        tableBody.innerHTML = '<tr><td colspan="6" class="text-center py-8 text-muted-foreground">هیچ پرونده‌ای یافت نشد</td></tr>';
        return;
    }
    
    tableBody.innerHTML = cases.map(caseItem => {
        const caseId = caseItem.case_id || caseItem.caseId;
        const clientId = caseItem.client_id || caseItem.clientId;
        const status = caseItem.last_case_status || caseItem.status;
        const createdAt = caseItem.case_creation_date || caseItem.caseCreationDate || caseItem.created_at;
        
        const formattedDate = createdAt ? 
            new Date(createdAt).toLocaleDateString('fa-IR') : 'نامشخص';
            
        const statusText = getStatusText(status);
        
        return `
            <tr data-testid="case-row-${caseId}">
                <td class="font-medium">${caseId}</td>
                <td>${clientId}</td>
                <td>موکل ${clientId}</td>
                <td>
                    <span class="px-2 py-1 text-xs rounded-full bg-blue-100 text-blue-800">
                        ${statusText}
                    </span>
                </td>
                <td>${formattedDate}</td>
                <td>
                    <div class="flex gap-2">
                        <button 
                            onclick="viewCaseDetails('${caseId}')" 
                            class="text-primary hover:underline text-sm" 
                            data-testid="button-view-details-${caseId}">
                            نمایش جزئیات
                        </button>
                        <button 
                            onclick="updateCaseStatus('${caseId}', prompt('وضعیت جدید را وارد کنید:'))" 
                            class="text-accent hover:underline text-sm" 
                            data-testid="button-update-status-${caseId}">
                            تغییر وضعیت
                        </button>
                    </div>
                </td>
            </tr>
        `;
    }).join('');
}

// Form submission handlers
document.getElementById('clientForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const formPhoneNumbers = [formData.get('phone1')];
    if (formData.get('phone2')) {
        formPhoneNumbers.push(formData.get('phone2'));
    }
    
    const clientData = {
        firstName: formData.get('firstName'),
        lastName: formData.get('lastName'),
        nationalId: formData.get('nationalId'),
        phoneNumbers: formPhoneNumbers,
        password: formData.get('password')
    };
    
    try {
        const response = await fetch('/api/admin/clients', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(clientData)
        });
        
        const result = await response.json();
        
        if (result.success) {
            hideAddClientForm();
            loadClients();
            loadDashboardStats();
            showToast('موکل جدید با موفقیت اضافه شد', 'success');
        } else {
            showToast(result.message || 'خطا در افزودن موکل', 'error');
        }
    } catch (error) {
        console.error('Error creating client:', error);
        showToast('خطا در افزودن موکل', 'error');
    }
});

document.getElementById('caseForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const caseData = {
        clientId: formData.get('clientId'),
        status: formData.get('status')
    };
    
    try {
        const response = await fetch('/api/admin/cases', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(caseData)
        });
        
        const result = await response.json();
        
        if (result.success) {
            hideAddCaseForm();
            loadCases();
            loadDashboardStats();
            showToast('پرونده جدید با موفقیت اضافه شد', 'success');
        } else {
            showToast(result.message || 'خطا در افزودن پرونده', 'error');
        }
    } catch (error) {
        console.error('Error creating case:', error);
        showToast('خطا در افزودن پرونده', 'error');
    }
});

// Assign case form submission
document.getElementById('assignCaseForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const caseData = {
        clientId: formData.get('clientId'),
        status: formData.get('status')
    };
    
    try {
        const response = await fetch('/api/admin/cases', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(caseData)
        });
        
        const result = await response.json();
        
        if (result.success) {
            hideAssignCaseForm();
            loadCases();
            loadClients(); // Refresh to update case count
            loadDashboardStats();
            showToast('پرونده با موفقیت به موکل تخصیص داده شد', 'success');
        } else {
            showToast(result.message || 'خطا در تخصیص پرونده', 'error');
        }
    } catch (error) {
        console.error('Error assigning case:', error);
        showToast('خطا در تخصیص پرونده', 'error');
    }
});

// Update case status
async function updateCaseStatus(caseId, newStatus) {
    try {
        const response = await fetch(`/api/admin/cases/${caseId}/status`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ status: newStatus })
        });
        
        const result = await response.json();
        
        if (result.success) {
            loadCases();
            loadDashboardStats();
            showToast('وضعیت پرونده بروزرسانی شد', 'success');
        } else {
            showToast(result.message || 'خطا در بروزرسانی وضعیت', 'error');
        }
    } catch (error) {
        console.error('Error updating case status:', error);
        showToast('خطا در بروزرسانی وضعیت', 'error');
    }
}

// Convert contact to client
async function convertToClient(contactId) {
    if (!confirm('آیا می‌خواهید این پیام را به موکل تبدیل کنید؟')) {
        return;
    }
    
    try {
        const response = await fetch(`/api/admin/convert-contact/${contactId}`, {
            method: 'POST'
        });
        
        const result = await response.json();
        
        if (result.success) {
            showToast('پیام با موفقیت به موکل تبدیل شد', 'success');
            showTab('clients'); // Switch to clients tab
        } else {
            showToast(result.message || 'خطا در تبدیل پیام', 'error');
        }
    } catch (error) {
        console.error('Error converting contact:', error);
        showToast('خطا در تبدیل پیام', 'error');
    }
}

// Show/Hide assign case form
function showAssignCaseForm(clientId, clientName) {
    document.getElementById('assign-case-form').classList.remove('hidden');
    document.getElementById('selected-client-name').textContent = clientName;
    document.getElementById('selected-client-id').textContent = clientId;
    document.getElementById('assign-client-id').value = clientId;
    
    // Reset form
    document.getElementById('assignCaseForm').reset();
    document.getElementById('assign-client-id').value = clientId; // Set again after reset
    
    // Scroll to form
    document.getElementById('assign-case-form').scrollIntoView({ behavior: 'smooth' });
}

function hideAssignCaseForm() {
    document.getElementById('assign-case-form').classList.add('hidden');
    document.getElementById('assignCaseForm').reset();
}

// Other functions
function viewClient(clientId) {
    showToast(`مشاهده جزئیات موکل ${clientId}`, 'info');
}

function replyToContact(contactId) {
    showToast(`پاسخ به پیام ${contactId}`, 'info');
}

// QA Management Functions
let qaItems = [];

function showAddQAForm() {
    document.getElementById('add-qa-form').classList.remove('hidden');
    document.getElementById('qaQuestion').focus();
}

function hideAddQAForm() {
    document.getElementById('add-qa-form').classList.add('hidden');
    document.getElementById('qaForm').reset();
    document.getElementById('qaTopic').value = 'عمومی';
    document.getElementById('qaShow').value = '1';
}

function showEditQAForm(qaItem) {
    document.getElementById('edit-qa-form').classList.remove('hidden');
    document.getElementById('editQaId').value = qaItem.id;
    document.getElementById('editQaQuestion').value = qaItem.question;
    document.getElementById('editQaAnswer').value = qaItem.answer;
    document.getElementById('editQaTopic').value = qaItem.topic;
    document.getElementById('editQaShow').value = qaItem.show;
    document.getElementById('editQaQuestion').focus();
}

function hideEditQAForm() {
    document.getElementById('edit-qa-form').classList.add('hidden');
    document.getElementById('editQaForm').reset();
}

async function loadQAItems() {
    try {
        document.getElementById('qa-loading').classList.remove('hidden');
        document.getElementById('qa-empty').classList.add('hidden');
        
        const response = await fetch('/api/admin/qa');
        const data = await response.json();
        
        if (data.success) {
            qaItems = data.items;
            displayQAItems(qaItems);
        } else {
            showToast('خطا در بارگذاری پرسش و پاسخ‌ها', 'error');
            document.getElementById('qa-empty').classList.remove('hidden');
        }
    } catch (error) {
        console.error('Error loading QA items:', error);
        showToast('خطا در اتصال به سرور', 'error');
        document.getElementById('qa-empty').classList.remove('hidden');
    } finally {
        document.getElementById('qa-loading').classList.add('hidden');
    }
}

function displayQAItems(items) {
    const container = document.getElementById('qa-list');
    const emptyState = document.getElementById('qa-empty');
    
    if (items.length === 0) {
        container.innerHTML = '';
        emptyState.classList.remove('hidden');
        return;
    }
    
    emptyState.classList.add('hidden');
    
    container.innerHTML = items.map(item => {
        const formattedDate = new Date(item.date_created).toLocaleDateString('fa-IR');
        const showStatus = item.show === 1 ? 'نمایش' : 'مخفی';
        const showBadgeClass = item.show === 1 ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800';
        
        return `
            <div class="border border-border rounded-lg p-4 hover:bg-muted/30 transition-colors" data-testid="qa-admin-item-${item.id}">
                <div class="flex justify-between items-start mb-3">
                    <h3 class="font-semibold text-lg">${item.question}</h3>
                    <div class="flex items-center gap-2">
                        <span class="px-2 py-1 text-xs rounded-full ${showBadgeClass}">${showStatus}</span>
                        <span class="text-sm text-muted-foreground">${formattedDate}</span>
                    </div>
                </div>
                <div class="text-sm text-muted-foreground mb-3">
                    <span class="bg-primary/10 text-primary px-2 py-1 rounded text-xs">${item.topic}</span>
                </div>
                <div class="text-sm mb-4 text-muted-foreground">
                    ${item.answer.length > 200 ? item.answer.substring(0, 200) + '...' : item.answer}
                </div>
                <div class="flex justify-end gap-2">
                    <button onclick="editQAItem('${item.id}')" class="text-primary hover:underline text-sm" data-testid="button-edit-qa-${item.id}">
                        ویرایش
                    </button>
                    <button onclick="deleteQAItem('${item.id}')" class="text-red-600 hover:underline text-sm" data-testid="button-delete-qa-${item.id}">
                        حذف
                    </button>
                </div>
            </div>
        `;
    }).join('');
}

async function editQAItem(qaId) {
    const qaItem = qaItems.find(item => item.id === qaId);
    if (qaItem) {
        showEditQAForm(qaItem);
    }
}

async function deleteQAItem(qaId) {
    if (!confirm('آیا مطمئن هستید که می‌خواهید این پرسش و پاسخ را حذف کنید؟')) {
        return;
    }
    
    try {
        const response = await fetch(`/api/admin/qa/${qaId}`, {
            method: 'DELETE'
        });
        
        const result = await response.json();
        
        if (result.success) {
            showToast('پرسش و پاسخ حذف شد', 'success');
            loadQAItems(); // Reload the list
        } else {
            showToast(result.message || 'خطا در حذف پرسش و پاسخ', 'error');
        }
    } catch (error) {
        console.error('Error deleting QA item:', error);
        showToast('خطا در اتصال به سرور', 'error');
    }
}

// QA Search functionality
function setupQASearch() {
    const searchInput = document.getElementById('qa-admin-search');
    if (searchInput) {
        searchInput.addEventListener('input', function(e) {
            const searchTerm = e.target.value.trim().toLowerCase();
            
            if (searchTerm === '') {
                displayQAItems(qaItems);
            } else {
                const filteredItems = qaItems.filter(item => 
                    item.question.toLowerCase().includes(searchTerm) ||
                    item.answer.toLowerCase().includes(searchTerm) ||
                    item.topic.toLowerCase().includes(searchTerm)
                );
                displayQAItems(filteredItems);
            }
        });
    }
}

// Case Event Management Functions
let currentCaseId = null;
let currentCaseEvents = [];

function viewCaseDetails(caseId) {
    currentCaseId = caseId;
    loadCaseEvents(caseId);
    document.getElementById('case-events-modal').classList.remove('hidden');
}

function closeCaseEventsModal() {
    document.getElementById('case-events-modal').classList.add('hidden');
    currentCaseId = null;
    currentCaseEvents = [];
    hideAddEventForm();
}

async function loadCaseEvents(caseId) {
    try {
        document.getElementById('case-events-loading').classList.remove('hidden');
        document.getElementById('case-events-empty').classList.add('hidden');
        // Clear the events list safely
        const eventsList = document.getElementById('case-events-list');
        eventsList.replaceChildren();
        
        // Get case events and info in one call (removes redundant API call)
        const response = await fetch(`/api/admin/cases/${caseId}/events`);
        
        // Check if response is OK and contains JSON
        if (!response.ok) {
            if (response.status === 401 || response.status === 403) {
                // Admin session expired or forbidden - redirect to login
                showToast('جلسه شما منقضی شده است. در حال انتقال به صفحه ورود...', 'warning');
                setTimeout(() => {
                    window.location.assign('/admin24');
                }, 2000);
                return;
            }
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const contentType = response.headers.get('content-type');
        
        // Handle cases where server redirected to HTML login page (302 → 200)
        if (response.redirected || !contentType || !contentType.includes('application/json')) {
            // This likely means we got redirected to login page or got HTML instead of JSON
            showToast('جلسه شما منقضی شده است. در حال انتقال به صفحه ورود...', 'warning');
            setTimeout(() => {
                window.location.assign(response.redirected ? response.url : '/admin24');
            }, 2000);
            return;
        }
        
        const data = await response.json();
        
        if (data.success) {
            // Safely display case info without XSS vulnerability
            if (data.case) {
                updateCaseInfoSafely(data.case);
            }
            
            currentCaseEvents = data.events;
            displayCaseEvents(data.events);
        } else {
            showToast('خطا در بارگذاری رویدادها', 'error');
            document.getElementById('case-events-empty').classList.remove('hidden');
        }
    } catch (error) {
        console.error('Error loading case events:', error);
        showToast('خطا در اتصال به سرور', 'error');
        document.getElementById('case-events-empty').classList.remove('hidden');
    } finally {
        document.getElementById('case-events-loading').classList.add('hidden');
    }
}

// Helper function to safely update case info without XSS
function updateCaseInfoSafely(caseItem) {
    const container = document.getElementById('case-events-case-info');
    container.replaceChildren();
    
    const div = document.createElement('div');
    div.className = 'text-sm';
    
    // Create safe text nodes to prevent XSS
    const caseLabel = document.createElement('span');
    caseLabel.className = 'font-medium';
    caseLabel.textContent = 'پرونده شماره:';
    
    const caseId = document.createTextNode(` ${caseItem.case_id || ''} | `);
    
    const clientLabel = document.createElement('span');
    clientLabel.className = 'font-medium';
    clientLabel.textContent = 'شناسه موکل:';
    
    const clientId = document.createTextNode(` ${caseItem.client_id || ''} | `);
    
    const statusLabel = document.createElement('span');
    statusLabel.className = 'font-medium';
    statusLabel.textContent = 'وضعیت:';
    
    const status = document.createTextNode(` ${getStatusText(caseItem.last_case_status || '')}`);
    
    div.appendChild(caseLabel);
    div.appendChild(caseId);
    div.appendChild(clientLabel);
    div.appendChild(clientId);
    div.appendChild(statusLabel);
    div.appendChild(status);
    
    container.appendChild(div);
}

function displayCaseEvents(events) {
    const container = document.getElementById('case-events-list');
    const emptyState = document.getElementById('case-events-empty');
    
    if (events.length === 0) {
        container.replaceChildren();
        emptyState.classList.remove('hidden');
        return;
    }
    
    emptyState.classList.add('hidden');
    
    // Clear container safely
    container.replaceChildren();
    
    // Create each event element safely without XSS vulnerabilities
    events.forEach(event => {
        const eventDiv = createEventElementSafely(event);
        container.appendChild(eventDiv);
    });
}

// Helper function to safely create event elements without XSS
function createEventElementSafely(event) {
    const formattedDate = new Date(event.occurredAt).toLocaleDateString('fa-IR', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
    
    // Create main container
    const eventDiv = document.createElement('div');
    eventDiv.className = 'border border-border rounded-lg p-4 hover:bg-muted/30 transition-colors';
    eventDiv.setAttribute('data-testid', `event-item-${event.id || ''}`);
    
    // Create header with event type and date
    const headerDiv = document.createElement('div');
    headerDiv.className = 'flex justify-between items-start mb-3';
    
    const leftDiv = document.createElement('div');
    
    const eventTypeH4 = document.createElement('h4');
    eventTypeH4.className = 'font-semibold text-lg';
    eventTypeH4.textContent = event.eventType || ''; // Safe text content prevents XSS
    
    const dateDiv = document.createElement('div');
    dateDiv.className = 'text-sm text-muted-foreground';
    dateDiv.textContent = formattedDate;
    
    leftDiv.appendChild(eventTypeH4);
    leftDiv.appendChild(dateDiv);
    
    // Create action buttons
    const actionsDiv = document.createElement('div');
    actionsDiv.className = 'flex gap-2';
    
    const editBtn = document.createElement('button');
    editBtn.className = 'text-primary hover:underline text-sm';
    editBtn.setAttribute('data-testid', `button-edit-event-${event.id || ''}`);
    editBtn.textContent = 'ویرایش';
    editBtn.onclick = () => editCaseEvent(event.id);
    
    const deleteBtn = document.createElement('button');
    deleteBtn.className = 'text-red-600 hover:underline text-sm';
    deleteBtn.setAttribute('data-testid', `button-delete-event-${event.id || ''}`);
    deleteBtn.textContent = 'حذف';
    deleteBtn.onclick = () => deleteCaseEvent(event.id);
    
    actionsDiv.appendChild(editBtn);
    actionsDiv.appendChild(deleteBtn);
    
    headerDiv.appendChild(leftDiv);
    headerDiv.appendChild(actionsDiv);
    
    eventDiv.appendChild(headerDiv);
    
    // Add details if they exist
    if (event.details) {
        const detailsDiv = document.createElement('div');
        detailsDiv.className = 'text-sm text-muted-foreground mt-2';
        detailsDiv.textContent = event.details; // Safe text content prevents XSS
        eventDiv.appendChild(detailsDiv);
    }
    
    return eventDiv;
}

function toggleAddEventForm() {
    const form = document.getElementById('add-event-form');
    const btn = document.getElementById('toggle-add-event-btn');
    
    if (form.classList.contains('hidden')) {
        showAddEventForm();
    } else {
        hideAddEventForm();
    }
}

function showAddEventForm() {
    document.getElementById('add-event-form').classList.remove('hidden');
    document.getElementById('toggle-add-event-btn').textContent = 'لغو';
    document.querySelector('select[name="eventType"]').focus();
}

function hideAddEventForm() {
    document.getElementById('add-event-form').classList.add('hidden');
    document.getElementById('toggle-add-event-btn').textContent = '+ افزودن رویداد';
    document.getElementById('eventForm').reset();
}

function cancelAddEvent() {
    hideAddEventForm();
}

function editCaseEvent(eventId) {
    const event = currentCaseEvents.find(e => e.id === eventId);
    if (event) {
        document.getElementById('edit-event-id').value = event.id;
        document.getElementById('edit-event-type').value = event.eventType;
        document.getElementById('edit-event-details').value = event.details || '';
        document.getElementById('edit-event-modal').classList.remove('hidden');
    }
}

function closeEditEventModal() {
    document.getElementById('edit-event-modal').classList.add('hidden');
    document.getElementById('editEventForm').reset();
}

async function deleteCaseEvent(eventId) {
    if (!confirm('آیا مطمئن هستید که می‌خواهید این رویداد را حذف کنید؟')) {
        return;
    }
    
    try {
        const response = await fetch(`/api/admin/cases/${currentCaseId}/events/${eventId}`, {
            method: 'DELETE'
        });
        
        const result = await response.json();
        
        if (result.success) {
            showToast('رویداد حذف شد', 'success');
            loadCaseEvents(currentCaseId); // Reload events
        } else {
            showToast(result.message || 'خطا در حذف رویداد', 'error');
        }
    } catch (error) {
        console.error('Error deleting case event:', error);
        showToast('خطا در اتصال به سرور', 'error');
    }
}

// Helper function to get Persian status text
function getStatusText(status) {
    const statusMap = {
        'under-review': 'در انتظار بررسی',
        'lawyer-study': 'در حال مطالعه وکیل',
        'in-progress': 'در حال اقدام',
        'awaiting-court': 'در انتظار رای دادگاه',
        'verdict-issued': 'صدور رای',
        'active': 'فعال',
        'pending': 'در انتظار',
        'completed': 'تکمیل شده'
    };
    return statusMap[status] || status;
}

// File Management Functions
let allClientsForFiles = [];

async function loadClientsForFiles() {
    try {
        const response = await fetch('/api/admin/clients');
        const result = await response.json();
        
        if (result.success) {
            allClientsForFiles = result.clients;
            displayClientsForFiles(allClientsForFiles);
        } else {
            showToast('خطا در بارگذاری موکلان', 'error');
        }
    } catch (error) {
        console.error('Error loading clients for files:', error);
        showToast('خطا در اتصال به سرور', 'error');
    }
}

function displayClientsForFiles(clients) {
    const tbody = document.getElementById('files-clients-table-body');
    
    if (clients.length === 0) {
        tbody.innerHTML = '<tr><td colspan="6" class="text-center py-8 text-muted-foreground">هیچ موکلی یافت نشد</td></tr>';
        return;
    }
    
    tbody.innerHTML = clients.map(client => {
        const phoneNumbers = typeof client.phoneNumbers === 'string' 
            ? JSON.parse(client.phoneNumbers) 
            : client.phoneNumbers;
        const firstPhone = Array.isArray(phoneNumbers) ? phoneNumbers[0] : phoneNumbers;
        
        return `
            <tr data-testid="files-client-row-${client.client_id}">
                <td data-testid="files-client-id-${client.client_id}">${client.client_id}</td>
                <td data-testid="files-client-name-${client.client_id}">${client.first_name} ${client.last_name}</td>
                <td data-testid="files-client-national-${client.client_id}">${client.national_id}</td>
                <td data-testid="files-client-phone-${client.client_id}">${firstPhone}</td>
                <td data-testid="files-client-count-${client.client_id}">
                    <span id="file-count-${client.client_id}">-</span>
                </td>
                <td>
                    <div class="flex gap-2">
                        <button onclick="viewClientFiles('${client.client_id}', '${client.first_name} ${client.last_name}')" 
                                class="btn-primary text-sm" 
                                data-testid="button-view-files-${client.client_id}">
                            مشاهده فایل‌ها
                        </button>
                        <button onclick="openSendFileModal('${client.client_id}', '${client.first_name} ${client.last_name}')" 
                                class="btn-success text-sm" 
                                data-testid="button-send-file-${client.client_id}">
                            ارسال فایل به موکل
                        </button>
                    </div>
                </td>
            </tr>
        `;
    }).join('');
    
    // Load file counts for each client
    clients.forEach(client => {
        loadClientFileCount(client.client_id);
    });
}

async function loadClientFileCount(clientId) {
    try {
        const response = await fetch(`/api/admin/clients/${clientId}/files`);
        const result = await response.json();
        
        if (result.success) {
            const countElement = document.getElementById(`file-count-${clientId}`);
            if (countElement) {
                countElement.textContent = result.files.length;
            }
        }
    } catch (error) {
        console.error(`Error loading file count for client ${clientId}:`, error);
    }
}

async function viewClientFiles(clientId, clientName) {
    try {
        // Hide client list and show file section
        document.querySelector('#files-tab .card').style.display = 'none';
        document.getElementById('client-files-section').classList.remove('hidden');
        
        // Update client info
        document.getElementById('selected-client-info').textContent = `موکل: ${clientName} (شناسه: ${clientId})`;
        
        // Load client files
        const response = await fetch(`/api/admin/clients/${clientId}/files`);
        const result = await response.json();
        
        if (result.success) {
            displayClientFiles(result.files);
        } else {
            showToast(result.message || 'خطا در دریافت فایل‌ها', 'error');
            closeClientFiles();
        }
    } catch (error) {
        console.error('Error loading client files:', error);
        showToast('خطا در اتصال به سرور', 'error');
        closeClientFiles();
    }
}

function displayClientFiles(files) {
    const contentDiv = document.getElementById('client-files-content');
    
    if (files.length === 0) {
        contentDiv.innerHTML = `
            <div class="text-center py-8 text-muted-foreground">
                این موکل هیچ فایلی آپلود نکرده است
            </div>
        `;
        return;
    }
    
    contentDiv.innerHTML = `
        <div class="overflow-x-auto">
            <table class="table">
                <thead>
                    <tr>
                        <th>نام فایل</th>
                        <th>توضیحات</th>
                        <th>حجم فایل</th>
                        <th>تاریخ آپلود</th>
                        <th>عملیات</th>
                    </tr>
                </thead>
                <tbody>
                    ${files.map(file => `
                        <tr data-testid="file-row-${file.id}">
                            <td data-testid="file-name-${file.id}" class="font-medium">${file.originalFileName}</td>
                            <td data-testid="file-description-${file.id}" class="text-sm">${file.description || '-'}</td>
                            <td data-testid="file-size-${file.id}" class="text-sm">${formatFileSize(file.fileSize)}</td>
                            <td data-testid="file-date-${file.id}" class="text-sm">${formatDate(file.uploadDate)}</td>
                            <td>
                                <button onclick="downloadClientFile('${file.id}', '${file.originalFileName}')" 
                                        class="btn-primary text-sm" 
                                        data-testid="button-download-${file.id}">
                                    دانلود
                                </button>
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        </div>
    `;
}

function closeClientFiles() {
    document.getElementById('client-files-section').classList.add('hidden');
    document.querySelector('#files-tab .card').style.display = 'block';
}

async function downloadClientFile(fileId, fileName) {
    try {
        const response = await fetch(`/api/admin/files/${fileId}/download`);
        
        if (response.ok) {
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = fileName;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
            showToast('فایل با موفقیت دانلود شد', 'success');
        } else {
            const result = await response.json();
            showToast(result.message || 'خطا در دانلود فایل', 'error');
        }
    } catch (error) {
        console.error('Error downloading file:', error);
        showToast('خطا در دانلود فایل', 'error');
    }
}

function formatFileSize(bytes) {
    const size = parseInt(bytes);
    if (size < 1024) return size + ' B';
    if (size < 1024 * 1024) return Math.round(size / 1024) + ' KB';
    return Math.round(size / (1024 * 1024)) + ' MB';
}

function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('fa-IR', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
    });
}

function searchFilesClients() {
    const searchTerm = document.getElementById('files-clients-search').value.toLowerCase().trim();
    
    if (!searchTerm) {
        displayClientsForFiles(allClientsForFiles);
        return;
    }
    
    const filteredClients = allClientsForFiles.filter(client => {
        const fullName = `${client.first_name} ${client.last_name}`.toLowerCase();
        const clientId = client.client_id.toString();
        const nationalId = client.national_id.toLowerCase();
        
        return fullName.includes(searchTerm) || 
               clientId.includes(searchTerm) || 
               nationalId.includes(searchTerm);
    });
    
    displayClientsForFiles(filteredClients);
}

// Logout function
async function logout() {
    try {
        const response = await fetch('/api/admin/logout', {
            method: 'POST'
        });
        
        const result = await response.json();
        
        if (result.success) {
            window.location.href = '/admin24';
        } else {
            showToast('خطا در خروج', 'error');
        }
    } catch (error) {
        console.error('Error logging out:', error);
        showToast('خطا در خروج', 'error');
    }
}

// Toast notification function
function showToast(message, type = 'info') {
    const toast = document.createElement('div');
    toast.className = `fixed top-4 right-4 p-4 rounded-lg text-white z-50 ${
        type === 'success' ? 'bg-green-500' : 
        type === 'error' ? 'bg-red-500' : 
        type === 'warning' ? 'bg-yellow-500' : 'bg-blue-500'
    }`;
    toast.textContent = message;
    
    document.body.appendChild(toast);
    
    setTimeout(() => {
        toast.remove();
    }, 3000);
}

// Initialize dashboard
document.addEventListener('DOMContentLoaded', function() {
    loadDashboardStats();
    
    // Initialize QA form handlers
    const qaForm = document.getElementById('qaForm');
    if (qaForm) {
        qaForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const qaData = {
                question: formData.get('question'),
                answer: formData.get('answer'),
                topic: formData.get('topic'),
                show: parseInt(formData.get('show'))
            };
            
            try {
                const response = await fetch('/api/admin/qa', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(qaData)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showToast('پرسش و پاسخ جدید اضافه شد', 'success');
                    hideAddQAForm();
                    loadQAItems();
                } else {
                    showToast(result.message || 'خطا در ایجاد پرسش و پاسخ', 'error');
                }
            } catch (error) {
                console.error('Error creating QA item:', error);
                showToast('خطا در اتصال به سرور', 'error');
            }
        });
    }
    
    const editQaForm = document.getElementById('editQaForm');
    if (editQaForm) {
        editQaForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const qaId = formData.get('id');
            const qaData = {
                question: formData.get('question'),
                answer: formData.get('answer'),
                topic: formData.get('topic'),
                show: parseInt(formData.get('show'))
            };
            
            try {
                const response = await fetch(`/api/admin/qa/${qaId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(qaData)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showToast('پرسش و پاسخ بروزرسانی شد', 'success');
                    hideEditQAForm();
                    loadQAItems();
                } else {
                    showToast(result.message || 'خطا در بروزرسانی پرسش و پاسخ', 'error');
                }
            } catch (error) {
                console.error('Error updating QA item:', error);
                showToast('خطا در اتصال به سرور', 'error');
            }
        });
    }

    // Initialize Case Event form handlers
    const eventForm = document.getElementById('eventForm');
    if (eventForm) {
        eventForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            // Validate that a case is selected
            if (!currentCaseId) {
                showToast('لطفاً ابتدا یک پرونده را انتخاب کنید', 'error');
                return;
            }
            
            const formData = new FormData(e.target);
            const eventType = formData.get('eventType');
            const details = formData.get('details');
            
            // Validate required fields
            if (!eventType) {
                showToast('لطفاً نوع رویداد را انتخاب کنید', 'error');
                return;
            }
            
            const eventData = {
                eventType: eventType,
                details: details
            };
            
            try {
                const response = await fetch(`/api/cases/${currentCaseId}/events`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(eventData)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showToast('رویداد جدید اضافه شد', 'success');
                    hideAddEventForm();
                    loadCaseEvents(currentCaseId); // Reload events
                } else {
                    showToast(result.message || 'خطا در ایجاد رویداد', 'error');
                }
            } catch (error) {
                console.error('Error creating case event:', error);
                showToast('خطا در اتصال به سرور', 'error');
            }
        });
    }

    const editEventForm = document.getElementById('editEventForm');
    if (editEventForm) {
        editEventForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const eventId = formData.get('eventId');
            const eventData = {
                eventType: formData.get('eventType'),
                details: formData.get('details')
            };
            
            try {
                const response = await fetch(`/api/admin/cases/${currentCaseId}/events/${eventId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(eventData)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showToast('رویداد بروزرسانی شد', 'success');
                    closeEditEventModal();
                    loadCaseEvents(currentCaseId); // Reload events
                } else {
                    showToast(result.message || 'خطا در بروزرسانی رویداد', 'error');
                }
            } catch (error) {
                console.error('Error updating case event:', error);
                showToast('خطا در اتصال به سرور', 'error');
            }
        });
    }
    
    // Setup QA search
    setupQASearch();
    
    // Add event delegation for assign case buttons (XSS fix)
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('assign-case-btn')) {
            const clientId = e.target.dataset.clientId;
            const clientName = e.target.dataset.clientName;
            showAssignCaseForm(clientId, clientName);
        }
    });
    
    // Add event listeners for client search and filtering
    const clientsSearch = document.getElementById('clients-search');
    const searchCriteriaRadios = document.querySelectorAll('input[name="searchCriteria"]');
    
    if (clientsSearch) {
        // Live search as user types (with debounce)
        let searchTimeout;
        clientsSearch.addEventListener('input', function() {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(performLiveSearch, 500); // 500ms debounce
        });
        
        // Also trigger search on Enter key
        clientsSearch.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                clearTimeout(searchTimeout);
                performLiveSearch();
            }
        });
    }
    
    // Add listeners to radio buttons
    searchCriteriaRadios.forEach(radio => {
        radio.addEventListener('change', function() {
            if (document.getElementById('clients-search').value.trim()) {
                performLiveSearch(); // Re-search when criteria changes
            }
        });
    });
    
    // Add event listener for files client search
    const filesClientsSearch = document.getElementById('files-clients-search');
    if (filesClientsSearch) {
        let searchTimeout;
        filesClientsSearch.addEventListener('input', function() {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(searchFilesClients, 300); // 300ms debounce
        });
        
        // Also trigger search on Enter key
        filesClientsSearch.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                clearTimeout(searchTimeout);
                searchFilesClients();
            }
        });
    }
});

// Send File to Client Modal Functions
let currentClientForFileUpload = null;

function openSendFileModal(clientId, clientName) {
    currentClientForFileUpload = { id: clientId, name: clientName };
    
    // Update modal title
    document.getElementById('send-file-client-name').textContent = clientName;
    document.getElementById('send-file-client-id').textContent = clientId;
    
    // Clear previous form data
    document.getElementById('admin-file-input').value = '';
    document.getElementById('admin-file-description').value = '';
    document.getElementById('admin-file-preview').style.display = 'none';
    
    // Load previously uploaded files for this client
    loadAdminUploadedFiles(clientId);
    
    // Show modal
    document.getElementById('send-file-modal').style.display = 'flex';
    document.body.style.overflow = 'hidden';
}

function closeSendFileModal() {
    document.getElementById('send-file-modal').style.display = 'none';
    document.body.style.overflow = 'auto';
    currentClientForFileUpload = null;
}

async function uploadFileToClient() {
    const fileInput = document.getElementById('admin-file-input');
    const description = document.getElementById('admin-file-description').value;
    const submitBtn = document.getElementById('submit-file-btn');
    
    if (!fileInput.files.length) {
        showToast('لطفاً فایلی انتخاب کنید', 'error');
        return;
    }
    
    const file = fileInput.files[0];
    const formData = new FormData();
    formData.append('file', file);
    formData.append('clientId', currentClientForFileUpload.id);
    formData.append('description', description);
    
    try {
        submitBtn.disabled = true;
        submitBtn.textContent = 'در حال ارسال...';
        
        const response = await fetch(`/api/admin/files/upload-to-client/${currentClientForFileUpload.id}`, {
            method: 'POST',
            body: formData
        });
        
        const result = await response.json();
        
        if (result.success) {
            showToast('فایل با موفقیت برای موکل ارسال شد', 'success');
            
            // Clear form
            fileInput.value = '';
            document.getElementById('admin-file-description').value = '';
            document.getElementById('admin-file-preview').style.display = 'none';
            
            // Reload the uploaded files list
            loadAdminUploadedFiles(currentClientForFileUpload.id);
        } else {
            showToast(result.message || 'خطا در ارسال فایل', 'error');
        }
    } catch (error) {
        console.error('Error uploading file to client:', error);
        showToast('خطا در اتصال به سرور', 'error');
    } finally {
        submitBtn.disabled = false;
        submitBtn.textContent = 'ارسال فایل';
    }
}

async function loadAdminUploadedFiles(clientId) {
    const container = document.getElementById('admin-uploaded-files-list');
    container.innerHTML = '<div class="text-center py-4">در حال بارگذاری...</div>';
    
    try {
        const response = await fetch(`/api/admin/clients/${clientId}/files`);
        const result = await response.json();
        
        if (result.success) {
            const adminFiles = result.files.filter(file => file.uploadedByType === 'admin');
            
            if (adminFiles.length === 0) {
                container.innerHTML = '<div class="text-center py-4 text-muted-foreground">هیچ فایلی برای این موکل ارسال نشده است</div>';
                return;
            }
            
            // Clear container and build secure DOM elements
            container.innerHTML = '';
            
            adminFiles.forEach(file => {
                const uploadDate = new Date(file.uploadDate).toLocaleDateString('fa-IR');
                
                // Create file container
                const fileDiv = document.createElement('div');
                fileDiv.className = 'border rounded-lg p-3 bg-blue-50 border-blue-200';
                
                // Create content wrapper
                const contentDiv = document.createElement('div');
                contentDiv.className = 'flex justify-between items-start';
                
                // Create file info section
                const infoDiv = document.createElement('div');
                infoDiv.className = 'flex-1';
                
                // File name (safe text content)
                const nameDiv = document.createElement('div');
                nameDiv.className = 'font-medium text-blue-900';
                nameDiv.textContent = `📩 ${file.originalFileName || 'Unknown'}`;
                infoDiv.appendChild(nameDiv);
                
                // Upload date
                const dateDiv = document.createElement('div');
                dateDiv.className = 'text-sm text-blue-600 mt-1';
                dateDiv.textContent = `تاریخ ارسال: ${uploadDate}`;
                infoDiv.appendChild(dateDiv);
                
                // Description (if exists)
                if (file.description) {
                    const descDiv = document.createElement('div');
                    descDiv.className = 'text-sm text-gray-600 mt-1';
                    descDiv.textContent = file.description;
                    infoDiv.appendChild(descDiv);
                }
                
                // Create button section
                const buttonDiv = document.createElement('div');
                buttonDiv.className = 'flex-shrink-0 mr-3';
                
                // Download button
                const downloadBtn = document.createElement('button');
                downloadBtn.className = 'admin-file-download-btn px-3 py-1 text-xs bg-blue-600 hover:bg-blue-700 text-white rounded transition-colors';
                downloadBtn.textContent = '📥 دانلود';
                downloadBtn.dataset.fileId = String(file.id);
                downloadBtn.dataset.testid = `button-download-admin-file-${file.id}`;
                
                // Add event listener
                downloadBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    const fileId = this.dataset.fileId;
                    if (fileId) {
                        downloadAdminFile(fileId);
                    }
                });
                
                buttonDiv.appendChild(downloadBtn);
                
                // Assemble the structure
                contentDiv.appendChild(infoDiv);
                contentDiv.appendChild(buttonDiv);
                fileDiv.appendChild(contentDiv);
                container.appendChild(fileDiv);
            });
        }
    } catch (error) {
        console.error('Error loading admin files:', error);
        container.innerHTML = '<div class="text-center py-4 text-red-600">خطا در بارگذاری فایل‌ها</div>';
    }
}

function handleAdminFileSelect(event) {
    const file = event.target.files[0];
    const preview = document.getElementById('admin-file-preview');
    const fileName = document.getElementById('admin-file-name');
    const fileInfo = document.getElementById('admin-file-info');
    
    if (file) {
        fileName.textContent = file.name;
        fileInfo.textContent = `اندازه: ${formatFileSize(file.size)} | نوع: ${file.type}`;
        preview.style.display = 'block';
    } else {
        preview.style.display = 'none';
    }
}

function formatFileSize(bytes) {
    if (bytes === 0) return '0 بایت';
    const k = 1024;
    const sizes = ['بایت', 'کیلوبایت', 'مگابایت', 'گیگابایت'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

async function downloadAdminFile(fileId) {
    if (!fileId || typeof fileId !== 'string') {
        showToast('شناسه فایل نامعتبر است', 'error');
        return;
    }
    
    try {
        const response = await fetch(`/api/admin/files/${encodeURIComponent(fileId)}/download`);
        
        if (response.ok) {
            const blob = await response.blob();
            const contentDisposition = response.headers.get('Content-Disposition');
            let fileName = `file_${fileId.substring(0, 8)}.bin`; // fallback filename
            
            // Try to extract filename from Content-Disposition header
            if (contentDisposition) {
                const fileNameMatch = contentDisposition.match(/filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/);
                if (fileNameMatch) {
                    fileName = fileNameMatch[1].replace(/['"]/g, '');
                    fileName = decodeURIComponent(fileName);
                }
            }
            
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = fileName;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
            showToast('فایل با موفقیت دانلود شد', 'success');
        } else {
            const result = await response.json();
            showToast(result.message || 'خطا در دانلود فایل', 'error');
        }
    } catch (error) {
        console.error('Error downloading admin file:', error);
        showToast('خطا در اتصال به سرور', 'error');
    }
}

// Client Messages Functions
let allClientsForMessaging = [];
let currentClientForMessaging = null;

async function loadClientsForMessaging() {
    try {
        const response = await fetch('/api/admin/clients');
        const result = await response.json();
        
        if (result.success) {
            allClientsForMessaging = result.clients;
            await displayClientsForMessaging(allClientsForMessaging);
        } else {
            showToast('خطا در بارگذاری موکلان', 'error');
        }
    } catch (error) {
        console.error('Error loading clients for messaging:', error);
        showToast('خطا در اتصال به سرور', 'error');
    }
}

async function displayClientsForMessaging(clients) {
    const tbody = document.getElementById('messaging-clients-table-body');
    
    if (clients.length === 0) {
        tbody.innerHTML = '<tr><td colspan="6" class="text-center py-8 text-muted-foreground">هیچ موکلی یافت نشد</td></tr>';
        return;
    }
    
    // Get unread message counts for all clients
    const clientsWithMessages = await Promise.all(clients.map(async (client) => {
        const unreadCount = await getUnreadMessageCount(client.client_id);
        return { ...client, unreadCount };
    }));
    
    tbody.innerHTML = clientsWithMessages.map(client => {
        const phoneNumbers = typeof client.phoneNumbers === 'string' 
            ? JSON.parse(client.phoneNumbers) 
            : client.phoneNumbers || [];
        
        return `
            <tr class="hover:bg-muted/30" data-testid="messaging-client-row-${client.client_id}">
                <td class="p-4 font-medium">${client.client_id}</td>
                <td class="p-4">${client.first_name} ${client.last_name}</td>
                <td class="p-4">${client.national_id}</td>
                <td class="p-4">${phoneNumbers.join(', ')}</td>
                <td class="p-4">
                    ${client.unreadCount > 0 ? 
                        `<span class="bg-red-100 text-red-800 px-2 py-1 rounded-full text-xs font-medium">${client.unreadCount} جدید</span>` : 
                        '<span class="text-muted-foreground">-</span>'
                    }
                </td>
                <td class="p-4">
                    <button onclick="openClientMessages('${client.client_id}', '${client.first_name} ${client.last_name}')" 
                            class="btn-primary text-sm px-4 py-2" 
                            data-testid="button-messages-${client.client_id}">
                        پیام ها
                    </button>
                </td>
            </tr>
        `;
    }).join('');
}

async function getUnreadMessageCount(clientId) {
    try {
        const response = await fetch(`/api/admin/messages/${clientId}/unread-count`);
        const result = await response.json();
        
        if (result.success) {
            return result.unreadCount || 0;
        } else {
            console.error(`Error getting unread count for client ${clientId}:`, result.message);
            return 0;
        }
    } catch (error) {
        console.error(`Error getting unread count for client ${clientId}:`, error);
        return 0;
    }
}

async function openClientMessages(clientId, clientName) {
    try {
        currentClientForMessaging = { id: clientId, name: clientName };
        
        // Hide client list and show messaging section
        document.querySelector('#client-messages-tab .card').style.display = 'none';
        document.getElementById('client-messages-section').classList.remove('hidden');
        
        // Update client info
        document.getElementById('selected-client-messaging-info').textContent = `موکل: ${clientName} (شناسه: ${clientId})`;
        document.getElementById('current-client-id').value = clientId;
        
        // Load messages
        await loadClientMessages(clientId);
        
    } catch (error) {
        console.error('Error opening client messages:', error);
        showToast('خطا در باز کردن پیام‌ها', 'error');
        closeClientMessages();
    }
}

async function loadClientMessages(clientId) {
    try {
        const messagesContainer = document.getElementById('messages-history');
        messagesContainer.innerHTML = '<div class="text-center text-muted-foreground">در حال بارگذاری پیام‌ها...</div>';
        
        const response = await fetch(`/api/admin/messages/${clientId}`);
        const result = await response.json();
        
        if (result.success) {
            displayMessages(result.messages || []);
        } else {
            showToast('خطا در بارگذاری پیام‌ها', 'error');
            messagesContainer.innerHTML = '<div class="text-center text-muted-foreground">خطا در بارگذاری پیام‌ها</div>';
        }
    } catch (error) {
        console.error('Error loading client messages:', error);
        showToast('خطا در اتصال به سرور', 'error');
        document.getElementById('messages-history').innerHTML = '<div class="text-center text-muted-foreground">خطا در اتصال به سرور</div>';
    }
}

function displayMessages(messages) {
    const container = document.getElementById('messages-history');
    
    if (messages.length === 0) {
        container.innerHTML = '<div class="text-center text-muted-foreground">هنوز پیامی وجود ندارد</div>';
        return;
    }

    container.innerHTML = messages.map(message => {
        const isAdmin = message.senderRole === 'admin';
        const messageClass = isAdmin ? 'admin-message' : 'client-message';
        const alignClass = isAdmin ? 'justify-end' : 'justify-start';
        
        return `
            <div class="flex ${alignClass} mb-4">
                <div class="max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${messageClass}" 
                     style="${isAdmin ? 'background: #2563eb; color: white; margin-left: auto;' : 'background: #f3f4f6; color: #374151; margin-right: auto;'}">
                    <div class="message-content">${escapeHtml(message.messageContent)}</div>
                    <div class="text-xs opacity-70 mt-1">
                        ${isAdmin ? 'شما' : currentClientForMessaging?.name || 'موکل'} • ${formatMessageDate(message.createdAt)}
                    </div>
                </div>
            </div>
        `;
    }).join('');

    // Scroll to bottom
    container.scrollTop = container.scrollHeight;
}

function formatMessageDate(dateString) {
    const date = new Date(dateString);
    const now = new Date();
    const diffInHours = (now - date) / (1000 * 60 * 60);
    
    if (diffInHours < 24) {
        return date.toLocaleTimeString('fa-IR', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });
    } else {
        return date.toLocaleDateString('fa-IR', { 
            year: 'numeric', 
            month: 'short', 
            day: 'numeric',
            hour: '2-digit', 
            minute: '2-digit' 
        });
    }
}

function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

function closeClientMessages() {
    document.getElementById('client-messages-section').classList.add('hidden');
    document.querySelector('#client-messages-tab .card').style.display = 'block';
    currentClientForMessaging = null;
}

async function refreshMessages() {
    if (currentClientForMessaging) {
        await loadClientMessages(currentClientForMessaging.id);
        showToast('پیام‌ها بروزرسانی شد', 'success');
    }
}

// Handle admin message form submission
document.addEventListener('DOMContentLoaded', function() {
    const messageForm = document.getElementById('admin-send-message-form');
    if (messageForm) {
        messageForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const clientId = document.getElementById('current-client-id').value;
            const messageContent = document.getElementById('admin-message-content').value.trim();
            
            if (!clientId || !messageContent) {
                showToast('لطفاً پیام خود را وارد کنید', 'error');
                return;
            }
            
            const submitBtn = e.target.querySelector('button[type="submit"]');
            const originalText = submitBtn.textContent;
            submitBtn.textContent = 'در حال ارسال...';
            submitBtn.disabled = true;
            
            try {
                const response = await fetch(`/api/admin/messages/${clientId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ messageContent })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showToast('پیام با موفقیت ارسال شد', 'success');
                    document.getElementById('admin-message-content').value = '';
                    
                    // Reload messages to show the new message
                    setTimeout(() => loadClientMessages(clientId), 500);
                } else {
                    showToast(result.message || 'خطا در ارسال پیام', 'error');
                }
            } catch (error) {
                console.error('Error sending admin message:', error);
                showToast('خطا در اتصال به سرور', 'error');
            } finally {
                submitBtn.textContent = originalText;
                submitBtn.disabled = false;
            }
        });
    }
});

// Search function for messaging clients
function searchMessagingClients() {
    const searchTerm = document.getElementById('messaging-clients-search').value.toLowerCase().trim();
    
    if (!searchTerm) {
        displayClientsForMessaging(allClientsForMessaging);
        return;
    }
    
    const filteredClients = allClientsForMessaging.filter(client => {
        const fullName = `${client.first_name} ${client.last_name}`.toLowerCase();
        const clientId = client.client_id.toString();
        const nationalId = client.national_id || '';
        
        return fullName.includes(searchTerm) || 
               clientId.includes(searchTerm) || 
               nationalId.includes(searchTerm);
    });
    
    displayClientsForMessaging(filteredClients);
}

// Add event listener for messaging clients search
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('messaging-clients-search');
    if (searchInput) {
        searchInput.addEventListener('input', searchMessagingClients);
    }
});
</script>

<!-- Send File to Client Modal -->
<div id="send-file-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" style="display: none;">
    <div class="bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
        <!-- Modal Header -->
        <div class="border-b px-6 py-4">
            <div class="flex justify-between items-center">
                <div>
                    <h3 class="text-lg font-bold text-green-700">ارسال فایل به موکل</h3>
                    <p class="text-sm text-gray-600 mt-1">
                        موکل: <span id="send-file-client-name" class="font-medium"></span> 
                        (شناسه: <span id="send-file-client-id" class="font-medium"></span>)
                    </p>
                </div>
                <button onclick="closeSendFileModal()" class="text-gray-400 hover:text-gray-600 text-2xl">&times;</button>
            </div>
        </div>
        
        <!-- Modal Content -->
        <div class="p-6">
            <!-- File Upload Section -->
            <div class="mb-6">
                <h4 class="font-medium mb-3 text-green-700">📤 ارسال فایل جدید</h4>
                
                <div class="border-2 border-dashed border-green-300 rounded-lg p-4 bg-green-50">
                    <input type="file" 
                           id="admin-file-input" 
                           class="hidden" 
                           accept=".pdf,.jpg,.jpeg,.png,.gif,.doc,.docx,.txt"
                           onchange="handleAdminFileSelect(event)">
                    
                    <button onclick="document.getElementById('admin-file-input').click()" 
                            class="w-full py-8 text-green-600 hover:text-green-700 hover:bg-green-100 rounded-lg transition-colors">
                        <div class="text-4xl mb-2">📁</div>
                        <div class="font-medium">انتخاب فایل برای ارسال</div>
                        <div class="text-sm">PDF, JPG, PNG, DOC, DOCX, TXT</div>
                    </button>
                    
                    <!-- File Preview -->
                    <div id="admin-file-preview" class="mt-4 p-3 bg-white rounded border" style="display: none;">
                        <div class="flex items-center gap-3">
                            <div class="text-2xl">📄</div>
                            <div>
                                <div id="admin-file-name" class="font-medium"></div>
                                <div id="admin-file-info" class="text-sm text-gray-600"></div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Description Field -->
                <div class="mt-4">
                    <label for="admin-file-description" class="block text-sm font-medium mb-2">توضیحات (اختیاری)</label>
                    <textarea id="admin-file-description" 
                              rows="3" 
                              class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500" 
                              placeholder="توضیحات مربوط به فایل را اینجا بنویسید..."></textarea>
                </div>
                
                <!-- Submit Button -->
                <button id="submit-file-btn" 
                        onclick="uploadFileToClient()" 
                        class="mt-4 w-full bg-green-600 hover:bg-green-700 text-white py-3 px-4 rounded-lg font-medium transition-colors">
                    ارسال فایل
                </button>
            </div>
            
            <!-- Previously Uploaded Files Section -->
            <div class="border-t pt-6">
                <h4 class="font-medium mb-3 text-blue-700">📋 فایل‌های قبلاً ارسال شده</h4>
                <div id="admin-uploaded-files-list" class="space-y-3">
                    <div class="text-center py-4">در حال بارگذاری...</div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
// Expose functions globally for inline onclick handlers
window.showTab = showTab;
window.logout = logout;
window.showAddClientForm = showAddClientForm;
window.hideAddClientForm = hideAddClientForm;
window.showAddCaseForm = showAddCaseForm;
window.hideAddCaseForm = hideAddCaseForm;
window.showAssignCaseForm = showAssignCaseForm;
window.hideAssignCaseForm = hideAssignCaseForm;
window.performLiveSearch = performLiveSearch;
window.clearClientsSearch = clearClientsSearch;
window.performCasesLiveSearch = performCasesLiveSearch;
window.clearCasesSearch = clearCasesSearch;
window.viewClient = viewClient;
window.viewCaseDetails = viewCaseDetails;
window.closeCaseEventsModal = closeCaseEventsModal;
window.toggleAddEventForm = toggleAddEventForm;
window.showAddEventForm = showAddEventForm;
window.hideAddEventForm = hideAddEventForm;
window.cancelAddEvent = cancelAddEvent;
window.editCaseEvent = editCaseEvent;
window.closeEditEventModal = closeEditEventModal;
window.deleteCaseEvent = deleteCaseEvent;
window.convertToClient = convertToClient;
window.updateCaseStatus = updateCaseStatus;
window.replyToContact = replyToContact;
window.showAddQAForm = showAddQAForm;
window.hideAddQAForm = hideAddQAForm;
window.showEditQAForm = showEditQAForm;
window.hideEditQAForm = hideEditQAForm;
window.editQAItem = editQAItem;
window.deleteQAItem = deleteQAItem;
window.closeClientFiles = closeClientFiles;
window.downloadClientFile = downloadClientFile;
window.viewClientFiles = viewClientFiles;
window.searchFilesClients = searchFilesClients;
window.openSendFileModal = openSendFileModal;
window.closeSendFileModal = closeSendFileModal;
window.uploadFileToClient = uploadFileToClient;
window.handleAdminFileSelect = handleAdminFileSelect;
window.downloadAdminFile = downloadAdminFile;
window.openClientMessages = openClientMessages;
window.closeClientMessages = closeClientMessages;
window.refreshMessages = refreshMessages;
window.searchMessagingClients = searchMessagingClients;
</script>
